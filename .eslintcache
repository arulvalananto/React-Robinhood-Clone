[{"E:\\Learning\\Webpage\\Front-End\\React\\Clone\\Firebase Clone\\robinhood-clone\\src\\Components\\NewsFeed\\NewsFeed.js":"1","E:\\Learning\\Webpage\\Front-End\\React\\Clone\\Firebase Clone\\robinhood-clone\\src\\Components\\LineGraph\\LineGraph.js":"2","E:\\Learning\\Webpage\\Front-End\\React\\Clone\\Firebase Clone\\robinhood-clone\\src\\Components\\TimeLine\\TimeLine.js":"3","E:\\Learning\\Webpage\\Front-End\\React\\Clone\\Firebase Clone\\robinhood-clone\\src\\Components\\Stats\\StatsRow\\StatsRow.js":"4","E:\\Learning\\Webpage\\Front-End\\React\\Clone\\Firebase Clone\\robinhood-clone\\src\\Components\\Stats\\Stats.js":"5"},{"size":2406,"mtime":1607529567936,"results":"6","hashOfConfig":"7"},{"size":2079,"mtime":1607529521522,"results":"8","hashOfConfig":"7"},{"size":1429,"mtime":1607531292067,"results":"9","hashOfConfig":"7"},{"size":1589,"mtime":1607527582476,"results":"10","hashOfConfig":"7"},{"size":2617,"mtime":1607527888457,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"fhcctl",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Learning\\Webpage\\Front-End\\React\\Clone\\Firebase Clone\\robinhood-clone\\src\\Components\\NewsFeed\\NewsFeed.js",["24"],"import React, { useEffect, useState } from \"react\";\r\nimport TimeLine from \"../TimeLine/TimeLine\";\r\nimport LineGraph from \"../LineGraph/LineGraph\";\r\nimport \"./NewsFeed.css\";\r\nimport { Clear } from \"@material-ui/icons\";\r\nimport { Avatar, Chip } from \"@material-ui/core\";\r\n\r\nconst NewsFeed = () => {\r\n  const [isClose, setIsClose] = useState(false);\r\n  const popularTopic = [\r\n    \"Technology\",\r\n    \"Top Movies\",\r\n    \"Upcoming Earnings\",\r\n    \"Crypto\",\r\n    \"Cannabis\",\r\n    \"Healthcare Supplies\",\r\n    \"Index ETFs\",\r\n    \"Pharma\",\r\n  ];\r\n  const sprites = Math.random() > 0.5 ? \"male\" : \"female\";\r\n  const [year, setYear] = useState(365);\r\n\r\n  const changeYear = (time) => {\r\n    setYear(time);\r\n  };\r\n  return (\r\n    <div className=\"newsFeed\">\r\n      <div className=\"newsFeed__container\">\r\n        <div className=\"newsFeed__chartSection\">\r\n          <div className=\"newsFeed__portfolio\">\r\n            <h1>$114,656</h1>\r\n            <p>+44.63 (0.04%) Today</p>\r\n          </div>\r\n          <div className=\"newsFeed__chart\">\r\n            <LineGraph year={year} />\r\n            <TimeLine changeYear={changeYear} />\r\n          </div>\r\n        </div>\r\n        <div className=\"newsFeed__buyingSection\">\r\n          <h4>Buying Power</h4>\r\n          <h4>$4.11</h4>\r\n        </div>\r\n        <div className={`newsFeed__marketSection ${isClose && \"close\"}`}>\r\n          <div className=\"newsFeed__marketBox\">\r\n            <h5>Markets Closed</h5>\r\n            <h2>Happy Thanksgiving</h2>\r\n          </div>\r\n          <Clear\r\n            className=\"newsFeed__marketIcon\"\r\n            onClick={() => setIsClose(true)}\r\n          />\r\n        </div>\r\n        <div className=\"newsFeed__popularitySection\">\r\n          <div className=\"newsFeed__popularityHeader\">\r\n            <h2>Popular Lists</h2>\r\n            <p>Show More</p>\r\n          </div>\r\n          <div className=\"newsFeed__popularityContent\">\r\n            {popularTopic.map((topic) => (\r\n              <Chip\r\n                variant=\"outlined\"\r\n                label={topic}\r\n                avatar={\r\n                  <Avatar\r\n                    src={`https://avatars.dicebear.com/api/${sprites}/${Math.round(\r\n                      Math.random() * 1000\r\n                    )}.svg\r\n`}\r\n                  />\r\n                }\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewsFeed;\r\n","E:\\Learning\\Webpage\\Front-End\\React\\Clone\\Firebase Clone\\robinhood-clone\\src\\Components\\LineGraph\\LineGraph.js",["25"],"E:\\Learning\\Webpage\\Front-End\\React\\Clone\\Firebase Clone\\robinhood-clone\\src\\Components\\TimeLine\\TimeLine.js",[],"E:\\Learning\\Webpage\\Front-End\\React\\Clone\\Firebase Clone\\robinhood-clone\\src\\Components\\Stats\\StatsRow\\StatsRow.js",["26"],"import React from \"react\";\r\nimport \"./StatsRow.css\";\r\nimport Stock from \"../../../stock.svg\";\r\nimport { db } from \"../../../firebase\";\r\n\r\nconst StatsRow = (props) => {\r\n  const percentage = ((props?.price - props?.openPrice) / props?.price) * 100;\r\n\r\n  const buyStock = () => {\r\n    db.collection(\"myStocks\")\r\n      .where(\"ticker\", \"==\", props?.name)\r\n      .get()\r\n      .then((snapshot) => {\r\n        if (!snapshot.empty) {\r\n          snapshot.docs.map((doc) => {\r\n            db.collection(\"myStocks\")\r\n              .doc(doc.id)\r\n              .update({\r\n                shares: +(doc.data().shares) + 1,\r\n              });\r\n          });\r\n        } else {\r\n          db.collection('myStocks').add({\r\n            ticker: props?.name,\r\n            shares: 1\r\n          })\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"statsRow\" onClick={buyStock}>\r\n      <div className=\"statsRow__intro\">\r\n        <h5>{props?.name}</h5>\r\n        {props.shares ? <p>{props?.shares} shares</p> : null}\r\n      </div>\r\n      <div className=\"statsRow__chart\">\r\n        <img src={Stock} alt=\"\" height={16} />\r\n      </div>\r\n      <div className=\"statsRow__numbers\">\r\n        <div className=\"statsRow__price\">${props?.price}</div>\r\n        <div\r\n          className={`statsRow__percentage ${\r\n            percentage > 0\r\n              ? \"statsRow__percentage--green\"\r\n              : \"statsRow__percentage--red\"\r\n          }`}\r\n        >\r\n          {percentage > 0 && \"+\"}\r\n          {+percentage.toFixed(2)}%\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatsRow;\r\n","E:\\Learning\\Webpage\\Front-End\\React\\Clone\\Firebase Clone\\robinhood-clone\\src\\Components\\Stats\\Stats.js",["27","28"],{"ruleId":"29","severity":1,"message":"30","line":1,"column":17,"nodeType":"31","messageId":"32","endLine":1,"endColumn":26},{"ruleId":"33","severity":1,"message":"34","line":23,"column":6,"nodeType":"35","endLine":23,"endColumn":12,"suggestions":"36"},{"ruleId":"37","severity":1,"message":"38","line":15,"column":35,"nodeType":"39","messageId":"40","endLine":15,"endColumn":37},{"ruleId":"37","severity":1,"message":"38","line":22,"column":31,"nodeType":"39","messageId":"40","endLine":22,"endColumn":33},{"ruleId":"37","severity":1,"message":"38","line":51,"column":28,"nodeType":"39","messageId":"40","endLine":51,"endColumn":30},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createMockData'. Either include it or remove the dependency array.","ArrayExpression",["41"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"42","fix":"43"},"Update the dependencies array to be: [createMockData, year]",{"range":"44","text":"45"},[654,660],"[createMockData, year]"]